server:
  port: 8082
  shutdown: graceful
  tomcat:
    threads:
      min-spare: 100
      max: 1000
    max-connections: 10000
    accept-count: 1000

management:
  server:
    port: 18082

spring:
  main:
    allow-circular-references: true
  lifecycle:
    timeout-per-shutdown-phase: 30s

#dubbo配置
dubbo:
 application:
   name: ${spring.application.name}
   qos-enable: false
   register-mode: service  #all，instance，service
   metadata-type: remote
   serialize-check-status: DISABLE
   check-serializable: false
 registry:
   address: nacos://${nacos.addr}?namespace=${nacos.namespace} #nacos://${nacos.addr}?registry-type=service
   protocol: grpc
   timeout: 2000
   register-mode: FORCE_INTERFACE #APPLICATION_FIRST，FORCE_APPLICATION，FORCE_INTERFACE
   file: ../registry/${dubbo.application.name}
  #  parameters:
  #    namespace: ${nacos.namespace}
  #    register-consumer-url: false
   use-as-metadata-center: true
   use-as-config-center: false
 protocol:
   name: grpc
   port: 28082
   corethreads: 10 #核心线程数
   serialization: hessian2
 provider:
   actives: 0 #consumer，每方法最大并发调用数
   connections: 10 #consumer，最大并发调用数
   accepts: 0 #最大可以接受的连接数
   threadpool: cached
   threads: 300 #最大线程数（队列为0是阻塞对列，该值没用）
   alive: 5000 #非核心线程存活时间
   queues: 0 #阻塞对列
   timeout: 60000
   executes: 0 #提供者,每方法最大并发调用数
   retries: 0
   filter: -exception
 consumer:
   check: false
   retries: 0

#mybatis配置
raf.dataSource:
  cms:
    url: jdbc:mariadb://${db.addr}/co_cms_db?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&failOverReadOnly=false&useSSL=false&allowMultiQueries=true&tinyInt1isBit=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: ${db.username}
    password: ${db.password}
    driver-class-name: org.mariadb.jdbc.Driver
    mapperLocations: mapper/cms/*.xml
    basePackage: com.company.b.dao.cms
    typeAliasesPackage: com.company.b.entity
    configLocation: classpath:mapper/mybatis-config.xml
    pool:
      maximumPoolSize: 10 #cpu数*2+磁盘数
      idleTimeout: 600000 #默认10分钟
      connectionTimeout: 15000 #15s比数据库大，数据库10s
      maxLifetime: 1740000 #29分钟比数据库小，数据库30分钟

#redis配置
spring.redis:
  database: 0
  # host: ${redis.host}
  # port: ${redis.port}
  cluster:
    nodes: ${redis.nodes}
  password: ${redis.password}
  timeout: 2s
  lettuce:
    pool:
      max-active: 100 #连接池最大连接数（使用负值表示没有限制）
      max-idle: 10 #连接池中的最大空闲连接
      min-idle: 5 #连接池中的最小空闲连接
      max-wait: 2s #连接池最大阻塞等待时间（使用负值表示没有限制）

#redisson配置
raf.redisson:
  enabled: true
  threads: 10
  nettyThreads: 10
  # single:
  #   host: ${redis.host}
  #   port: ${redis.port}
  #   password: ${redis.password}
  #   database: 0
  #   retryAttempts: 3
  #   retryInterval: 1500
  #   idleConnectionTimeout: 2000
  #   subscriptionsPerConnection: 5
  #   connectTimeout: 5000
  #   timeout: 2000
  cluster:
    nodes: ${redis.nodes}
    password: ${redis.password}

#seata配置
seata:
  enabled: true
  enableAutoDataSourceProxy: true
  application-id: ${spring.application.name}
  tx-service-group: my_test_tx_group
  config:
    type: file
  registry:
    type: nacos
    nacos:
      application: seata-server
      server-addr: ${nacos.addr}
      group : seata
      namespace: ${nacos.namespace}
  service:
    disableGlobalTransaction: false
    vgroup-mapping.my_test_tx_group: default
  client:
    support:
      spring:
        datasource-autoproxy: true

#异步线程池配置
raf.executor:
  enabled: true
  corePoolSize: 50
  queueCapacity: 100
  maxPoolSize: 120
  keepAliveSeconds: 5
  threadNamePrefix: raf-async-thread-pool-
  metricEnabled: false

#rabbitMq配置
raf.rabbit:
  enabled: true
  addresses: ${mq.addr}
  username: ${mq.username}
  password: ${mq.password}
  consumer: #消费者配置
    group: ${spring.application.name} #消费者组,默认写spring.application.name即可
  provider: #生产者配置
    exchange: xx.demo.topic #topicExchange交换机名称
    ack: true #是否监听发送返回 confirm，return
  delay: #延迟队列，同一个业务延迟时间间隔必须一样
    deadExchange: xx.demo.dead.topic #死信队列
    receiveExchange: xx.demo.receive.topic #接收队列
    queuePrefix:
      - xx.demo.delay.businessOne #业务1 接收队列xx.demo.delay.businessOne.receive.queue
      - xx.demo.delay.businessTwo #业务2 接收队列xx.demo.delay.businessTwo.receive.queue